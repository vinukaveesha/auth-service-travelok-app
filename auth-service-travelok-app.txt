
================================================================================
File: .env
Size: 73 B
================================================================================

PORT=5000
MESH_SDK_VERSION=1.5.2
SESSION_SECRET=your_secure_secret_here

================================================================================
File: .gitignore
Size: 48 B
================================================================================

/server/node_modules/
/server/package-lock.json

================================================================================
File: auth-service-travelok-app.txt
Size: 15.04 kB
================================================================================


================================================================================
File: .env
Size: 73 B
================================================================================

PORT=5000
MESH_SDK_VERSION=1.5.2
SESSION_SECRET=your_secure_secret_here

================================================================================
File: .gitignore
Size: 23 B
================================================================================

/server/node_modules/

================================================================================
File: .env
Size: 73 B
================================================================================

PORT=5000
MESH_SDK_VERSION=1.5.2
SESSION_SECRET=your_secure_secret_here

================================================================================
File: client\index.html
Size: 1.16 kB
================================================================================

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Travelok - Wallet Binding</title>
  <script src="https://unpkg.com/@meshsdk/core@1.5.2/dist/mesh.js"></script>
  <link rel="stylesheet" href="style.css">
</head>
<body>
  <div class="container">
    <h1>Travelok Wallet Binding</h1>
    
    <div class="card" id="wallet-section">
      <h2>Step 1: Connect Wallet</h2>
      <div id="wallet-buttons"></div>
      <div id="wallet-info" class="hidden">
        <p><strong>Connected Address:</strong> <span id="wallet-address"></span></p>
        <button id="bind-wallet" class="btn">Bind Wallet</button>
      </div>
    </div>
    
    <div class="card hidden" id="sign-section">
      <h2>Step 2: Sign Challenge</h2>
      <p id="challenge-message"></p>
      <button id="sign-button" class="btn">Sign Message</button>
    </div>
    
    <div class="card hidden" id="result-section">
      <h2>Binding Result</h2>
      <div id="result-message"></div>
    </div>
  </div>
  
  <script src="script.js"></script>
</body>
</html>

================================================================================
File: client\script.js
Size: 4.92 kB
================================================================================

document.addEventListener('DOMContentLoaded', async () => {
  // DOM Elements
  const walletSection = document.getElementById('wallet-section');
  const walletButtons = document.getElementById('wallet-buttons');
  const walletInfo = document.getElementById('wallet-info');
  const walletAddress = document.getElementById('wallet-address');
  const bindWalletBtn = document.getElementById('bind-wallet');
  const signSection = document.getElementById('sign-section');
  const signButton = document.getElementById('sign-button');
  const challengeMessage = document.getElementById('challenge-message');
  const resultSection = document.getElementById('result-section');
  const resultMessage = document.getElementById('result-message');

  let selectedWallet = null;
  let userAddress = null;
  let challengeData = null;

  const API_BASE = 'http://localhost:3000';

  // Fetch wallet configuration from server
  async function loadWalletConfig() {
    try {
      const response = await fetch(`${API_BASE}/api/wallet-config`);
      const config = await response.json();
      renderWalletButtons(config.supportedWallets);
    } catch (error) {
      console.error('Failed to load wallet config:', error);
      showError('Failed to load wallet configuration');
    }
  }

  // Render wallet buttons
  function renderWalletButtons(wallets) {
    walletButtons.innerHTML = '';
    
    wallets.forEach(wallet => {
      const button = document.createElement('button');
      button.className = 'btn wallet-btn';
      button.innerHTML = `
        <img src="${wallet.icon}" alt="${wallet.name}" height="24">
        Connect with ${wallet.name}
      `;
      button.dataset.wallet = wallet.name;
      button.addEventListener('click', () => connectWallet(wallet.name));
      walletButtons.appendChild(button);
    });
  }

  // Connect to wallet
  async function connectWallet(walletName) {
    try {
      // Enable wallet
      selectedWallet = await Cardano.enableWallet(walletName);
      
      // Get user address
      const addresses = await selectedWallet.getUsedAddresses();
      userAddress = addresses[0];
      
      // Update UI
      walletAddress.textContent = userAddress;
      walletInfo.classList.remove('hidden');
    } catch (error) {
      console.error('Wallet connection failed:', error);
      showError(`Wallet connection failed: ${error.message || error}`);
    }
  }

  // Initiate wallet binding
  bindWalletBtn.addEventListener('click', async () => {
    try {
      // Request challenge from server
      const response = await fetch(`${API_BASE}/api/auth-challenge`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ address: userAddress })
      });
      
      if (!response.ok) {
        const error = await response.json();
        throw new Error(error.error || 'Challenge request failed');
      }
      
      challengeData = await response.json();
      
      // Update UI
      challengeMessage.textContent = challengeData.message;
      walletSection.classList.add('hidden');
      signSection.classList.remove('hidden');
    } catch (error) {
      console.error('Challenge request failed:', error);
      showError(error.message);
    }
  });

  // Sign challenge message
  signButton.addEventListener('click', async () => {
    try {
      // Sign message with wallet
      const { signature, key } = await selectedWallet.signData(
        userAddress, 
        challengeData.message
      );
      
      // Verify signature with server
      const verifyResponse = await fetch(`${API_BASE}/api/verify-wallet`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ 
          address: userAddress, 
          signature,
          key
        })
      });
      
      const result = await verifyResponse.json();
      
      // Show result
      signSection.classList.add('hidden');
      resultSection.classList.remove('hidden');
      
      if (result.success) {
        resultMessage.className = 'success';
        resultMessage.innerHTML = `
          <h3>✓ Wallet Bound Successfully!</h3>
          <p>Address: ${userAddress}</p>
          <p>You can now use this wallet for bookings and reviews.</p>
        `;
      } else {
        throw new Error(result.error || 'Wallet binding failed');
      }
    } catch (error) {
      console.error('Signature verification failed:', error);
      showError(error.message);
    }
  });

  // Show error message
  function showError(message) {
    resultSection.classList.remove('hidden');
    resultMessage.className = 'error';
    resultMessage.innerHTML = `<h3>✗ Error:</h3><p>${message}</p>`;
  }

  // Initialize
  await loadWalletConfig();
});

================================================================================
File: client\style.css
Size: 1.61 kB
================================================================================

:root {
  --primary: #3A86FF;
  --success: #38b000;
  --error: #e63946;
  --dark: #1a202c;
  --light: #f8f9fa;
}

* {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
}

body {
  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
  background-color: #f0f2f5;
  color: var(--dark);
  line-height: 1.6;
  padding: 20px;
}

.container {
  max-width: 600px;
  margin: 0 auto;
  padding: 20px;
}

.card {
  background: white;
  border-radius: 10px;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  padding: 25px;
  margin-bottom: 25px;
}

h1 {
  text-align: center;
  margin-bottom: 30px;
  color: var(--primary);
}

h2 {
  margin-bottom: 15px;
  font-size: 1.4rem;
}

.btn {
  background: var(--primary);
  color: white;
  border: none;
  border-radius: 5px;
  padding: 12px 20px;
  font-size: 1rem;
  cursor: pointer;
  display: inline-block;
  transition: all 0.3s ease;
}

.btn:hover {
  background: #2a75ff;
  transform: translateY(-2px);
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
}

.wallet-btn {
  display: block;
  width: 100%;
  margin-bottom: 10px;
  text-align: center;
}

.hidden {
  display: none;
}

#wallet-info {
  margin-top: 20px;
  padding-top: 20px;
  border-top: 1px solid #eee;
}

#result-message {
  padding: 15px;
  border-radius: 5px;
  margin-top: 15px;
}

.success {
  background: rgba(56, 176, 0, 0.1);
  border: 1px solid var(--success);
  color: var(--success);
}

.error {
  background: rgba(230, 57, 70, 0.1);
  border: 1px solid var(--error);
  color: var(--error);
}

================================================================================
File: server\auth-utils.js
Size: 1.37 kB
================================================================================

import { readFile } from 'node:fs/promises';
import { resolve, dirname } from 'node:path';
import { fileURLToPath } from 'node:url';
import crypto from 'node:crypto';
import * as csl from '@emurgo/cardano-serialization-lib-nodejs';

const __dirname = dirname(fileURLToPath(import.meta.url));

export async function loadWalletConfig() {
  // Use __dirname to ensure correct path
  const configPath = resolve(__dirname, 'wallet-config.json');
  try {
    return JSON.parse(await readFile(configPath, 'utf8'));
  } catch (error) {
    console.error('Wallet config error:', error);
    throw new Error('Wallet config file missing or invalid: ' + configPath);
  }
}

export function generateNonce() {
  return crypto.randomBytes(16).toString('hex');
}

export function validateAddress(address) {
  return /^addr[0-9a-z]{50,60}$/.test(address);
}

// Cardano signature verification
export async function verifySignature(address, signature, key, message) {
  try {
    const publicKey = csl.PublicKey.from_bytes(Buffer.from(key, 'hex'));
    const ed25519Signature = csl.Ed25519Signature.from_bytes(Buffer.from(signature, 'hex'));
    
    return publicKey.verify(
      Buffer.from(message).buffer,
      ed25519Signature
    );
  } catch (error) {
    console.error('Signature verification error:', error);
    return false;
  }
}

================================================================================
File: server\index.js
Size: 3 kB
================================================================================

import express from 'express';
import cors from 'cors';
import dotenv from 'dotenv';
import session from 'express-session';
import { resolve } from 'node:path';
import { dirname, join } from 'node:path';
import { fileURLToPath } from 'node:url';
import { 
  loadWalletConfig, 
  generateNonce, 
  validateAddress,
  verifySignature
} from './auth-utils.js';

dotenv.config();
const app = express();
const PORT = process.env.PORT || 3000;

const __dirname = dirname(fileURLToPath(import.meta.url));

// Middleware
app.use(cors({
  origin: '*', // Allow all origins (for development only!)
  methods: ['GET', 'POST']
}));
app.use(express.json());
app.use(session({
  secret: process.env.SESSION_SECRET || 'fallback-secret',
  resave: false,
  saveUninitialized: true,
  cookie: { secure: false, maxAge: 300000 } // 5 minutes
}));

app.use(express.static(join(__dirname, '../client')));

// Wallet config cache
let walletConfig;

// 1. Get wallet configuration
app.get('/api/wallet-config', async (req, res) => {
  try {
    walletConfig = walletConfig || await loadWalletConfig();
    console.log('Loaded wallet config:', walletConfig);
    res.json(walletConfig);
  } catch (error) {
    console.error('Wallet config endpoint error:', error);
    res.status(500).json({ error: error.message });
  }
});

// 2. Generate authentication challenge
app.post('/api/auth-challenge', (req, res) => {
  const { address } = req.body;
  
  if (!validateAddress(address)) {
    return res.status(400).json({ error: 'Invalid Cardano address' });
  }

  const nonce = generateNonce();
  req.session.nonce = nonce;
  req.session.address = address;
  req.session.timestamp = Date.now();
  
  res.json({ 
    nonce,
    message: `Sign this message to authenticate: ${nonce}` 
  });
});

// 3. Verify signature and bind wallet
app.post('/api/verify-wallet', async (req, res) => {
  const { address, signature, key } = req.body;
  
  // Session validation
  if (!req.session.nonce || req.session.address !== address) {
    return res.status(400).json({ error: 'Session expired or invalid' });
  }

  // Cleanup old sessions
  if (Date.now() - req.session.timestamp > 300000) {
    req.session.destroy();
    return res.status(400).json({ error: 'Session expired' });
  }

  try {
    // Verify cryptographic signature
    const isValid = await verifySignature(
      address,
      signature,
      key,
      req.session.nonce
    );

    if (!isValid) {
      return res.status(401).json({ error: 'Invalid signature' });
    }

    // Success - Bind wallet to user
    req.session.destroy();
    
    res.json({ 
      success: true,
      message: 'Wallet bound successfully!',
      address
    });
    
  } catch (error) {
    res.status(500).json({ error: 'Verification failed: ' + error.message });
  }
});

app.listen(PORT, () => {
  console.log(`Auth service running on http://localhost:${PORT}`);
});




================================================================================
File: server\package.json
Size: 363 B
================================================================================

{
  "name": "travelok-auth-service",
  "version": "1.0.0",
  "type": "module",
  "scripts": {
    "start": "node index.js"
  },
  "dependencies": {
    "@emurgo/cardano-serialization-lib-nodejs": "^11.5.0",
    "cors": "^2.8.5",
    "dotenv": "^16.4.5",
    "express": "^4.19.2",
    "express-session": "^1.18.0",
    "node-fetch": "^3.3.2"
  }
}


================================================================================
File: server\wallet-config.json
Size: 394 B
================================================================================

{
  "supportedWallets": [
    {
      "name": "Nami",
      "icon": "https://namiwallet.io/favicon.ico",
      "apiVersion": "1.0.0"
    },
    {
      "name": "Lace",
      "icon": "https://www.lace.io/favicon.ico",
      "apiVersion": "1.0.0"
    },
    {
      "name": "Eternal",
      "icon": "https://eternalwallet.io/favicon.ico",
      "apiVersion": "1.0.0"
    }
  ]
}